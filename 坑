<!--H5页面窗口自动调整到设备宽度，并禁止用户缩放页面-->
<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no>
<!--忽略将页面中的数字识别为电话号码-->
<meta name="format-detection" content="telephone=no" />
<!--忽略Android平台对邮箱地址的识别-->
<meta name="format-detection" content="email=no" />
<!--当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari-->
<meta name="apple-mobile-web-app-capable" content="yes" />  <!-- ios7.0版本以后，safari上已看不到效果 -->
<!--将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式-->
<meta name="apple-mobile-web-app-status-bar-style" content="black" /> <!-- 可选default、black、black-translucent -->

<!--viewport模板——通用-->
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport">
<meta content="yes" name="apple-mobile-web-app-capable">
<meta content="black" name="apple-mobile-web-app-status-bar-style">
<meta content="telephone=no" name="format-detection">
<meta content="email=no" name="format-detection">
<title>标题</title>
<link rel="stylesheet" href="index.css">
</head>

<body>
这里开始内容
</body>
</html>

/*移动端如何定义字体font-family
中文字体使用系统默认即可，英文用Helvetica*/

/* 移动端定义字体的代码 */
body{font-family:Helvetica;

<!--移动端touch事件(区分webkit 和 winphone)-->

/*以下支持webkit*/
touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指
touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动
touchend——当手指离开屏幕时触发
touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用

TouchEvent
touches：屏幕上所有手指的信息
targetTouches：手指在目标区域的手指信息
changedTouches：最近一次触发该事件的手指信息
touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息

参数信息(changedTouches[0])
clientX、clientY在显示区的坐标
target：当前元素


移动端click屏幕产生200-300 ms的延迟响应
移动设备上的web网页是有300ms延迟的，可能会造成按钮点击延迟甚至点击失效。（双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例
，出现200-300毫秒的延迟的原因就是出现在如何判断是快速点击上，当用户点击了一下之后，如果在一个时间长度之内没有进行第二次点击，那么浏览器就会认为是单击跳转链接
，如果出现了第二次点击，那么就认为是双击对浏览器页面中的局部进行缩放操作.而这个时间长度在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果是
当用户纯粹单击页面的时候需要过一段时间才响应，给用户的体验感觉慢。对开发人员来说，页面js捕获click时间的回调处理函数需要300ms后才生效，也可能会间接影响
其他业务逻辑的处理）。
解决方案： 1、使用fastclick事件可以解决在手机端点击事件的300ms延迟
          2、zepto的touch模块，tap事件也是为了解决click延迟的问题
触摸事件的响应顺序: touchstart touchmove touchend onclick
解决300ms延迟事件,也可以通过绑定ontouchstart事件,加快对事件的响应。

<!--Retina显示屏-->一种具有超高像素密度的液晶显示屏,同样大小的屏幕上显示的像素点由1个变为多个.
高清显示屏下的位图被放大,图片会变得模糊。通常移动端的视觉稿通常会设置为PC端的2倍.
前端的应对方案为:设计稿切出来的图片保证长宽为偶数，并使用background-size把图片缩小为原来的一半.

IOS中点一个链接会出现一个灰色半透明遮罩层,禁用的写法为 -webkit-tap-highlight-color:rgba(0,0,0,0);
a,button,input,textarea{-webkit-tap-highlight-color:rgba(0,0,0,0)}          

winphone系统a、input标签被点击时产生的半透明灰色背景怎么去掉
<meta name="msapplication-tap-highlight" content="no">

webkit表单元素默认外观的重置：.css{-webkit-appearence:none}
webkit表单输入框placeholder的颜色值改变: input::-webkit-input-placeholder{color:#ff0000}；/*注意，确实是两个冒号*/
                                       input:focus::-webkit-input-placeholder{color:#00ff00};
webkit表单输入框placeholder文字在IOS上可以换行,在Android上不行. textarea都可以换行. 

::ms-expand适用于表单下拉选择控件下拉箭头的修改，有多个属性值，设置隐藏并使用背景图片修饰.
select::ms-expand{display:none};

禁用radio和checkbox默认样式.
::-ms-check 适用于表单复选框或单选按钮默认图标的修改.同样有多个属性值，设置隐藏display:none,并用背景图片修饰。
input[type=radio]::ms-check,input[type=checkbox]::ms-check{display:none};

禁用PC端表单输入框默认清除按钮
当表单文本输入框输入内容后会显示文本清除按钮，::-ms-clear 适用于该清除按钮的修改，
同样设置使它隐藏 (display:none) 并使用背景图片来修饰可得到我们想要的效果。
input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear{display: none;}

禁止ios 长按时不触发系统的菜单，禁止ios&android长按时下载图片
.css{-webkit-touch-callout: none}
禁止ios和android用户选中文字
.css{-webkit-user-select:none}
<!--打电话-->
<a href="tel:0755-10086">打电话给:0755-10086</a>
<!--发短信，winphone系统无效-->
<a href="sms:10086">发短信给: 10086</a>
<!--写邮件-->
<a href="mailto:peun@foxmail.com">peun@foxmail.com</a>

模拟按钮hover效果
移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，
使用css的hover并不能满足我们的需求，还好国外有个激活css的active效果，代码如下
<!--兼容性ios5+、部分android 4+、winphone 8-->

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport">
<meta content="yes" name="apple-mobile-web-app-capable">
<meta content="black" name="apple-mobile-web-app-status-bar-style">
<meta content="telephone=no" name="format-detection">
<meta content="email=no" name="format-detection">
<style type="text/css">
a{-webkit-tap-highlight-color: rgba(0,0,0,0);}
.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;
background-color: #4185F3;}
.btn-blue:active{background-color: #357AE8;}
</style>
</head>
<body>

<div class="btn-blue">按钮</div>

<script type="text/javascript">
document.addEventListener("touchstart", function(){}, true)
</script>
</body>
</html>

<!--要做到全兼容的办法，可通过绑定ontouchstart和ontouchend来控制按钮的类名-->
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport">
<meta content="yes" name="apple-mobile-web-app-capable">
<meta content="black" name="apple-mobile-web-app-status-bar-style">
<meta content="telephone=no" name="format-detection">
<meta content="email=no" name="format-detection">
<style type="text/css">
a{-webkit-tap-highlight-color: rgba(0,0,0,0);}
.btn-blue{display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:#FFFFFF;background-color: #4185F3;}
.btn-blue-on{background-color: #357AE8;}
</style>
</head>
<body>

<div class="btn-blue">按钮</div>

<script type="text/javascript">
var btnBlue = document.querySelector(".btn-blue");
btnBlue.ontouchstart = function(){
this.className = "btn-blue btn-blue-on"
}
btnBlue.ontouchend = function(){
this.className = "btn-blue"
}
</script>
</body>
</html>

<!--屏幕旋转的事件和样式-->
事件：window.orientation，取值：正负90表示横屏模式、0和180表现为竖屏模式；
window.orientationchange = function(){
  switch(window.orientation){
   case:90:
   case:-90:
   alert('横屏' + window.orientation);
   break;
   case:0:
   case:180:
   alert('竖屏' + windwo.orientation);
  }
}


//竖屏时使用的样式
@media all and (orientation:portrait) {
.css{}
}

//横屏时使用的样式
@media all and (orientation:landscape) {
.css{}
}

audio元素和video元素在ios和andriod中无法自动播放
应对方案：触屏即播
$('html').one('touchstart',function(){
audio.play()
})

摇一摇功能
HTML5 deviceMotion：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。

手机拍照和上传图片
<input type=”file”>的accept 属性

<!-- 选择照片 -->
<input type=file accept="image/*">
<!-- 选择视频 -->
<input type=file accept="video/*">

ios使用-webkit-text-size-adjust禁止调整字体大小
body{-webkit-text-size-adjust: 100%!important;}


整个页面用rem或者百分比布局
消除transition闪屏

.css{
/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/
-webkit-transform-style: preserve-3d;
/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/
-webkit-backface-visibility: hidden;
}

开启硬件加速
解决页面闪白
保证动画流畅
.css {
-webkit-transform: translate3d(0, 0, 0);
-moz-transform: translate3d(0, 0, 0);
-ms-transform: translate3d(0, 0, 0);
transform: translate3d(0, 0, 0);
}

取消input在ios下，输入的时候英文首字母的默认大写
<input autocapitalize="off" autocorrect="off" />

android 上去掉语音输入按钮
input::-webkit-input-speech-button {display: none}


设计高性能CSS3动画的几个要素

尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位
利用translate3D开启GPU加速



fixed bug
ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位
android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位
ios4下不支持position:fixed
解决方案

可用isroll.js，暂无完美方案



如何阻止windows Phone的默认触摸事件
winphone下默认触摸事件事件使用e.preventDefault是无效的

目前解决方法是使用样式来禁用
html{-ms-touch-action: none;}/* 禁止winphone默认触摸事件 */


播放视频不全屏

<!--
1.ios7+支持自动播放
2.支持Airplay的设备（如：音箱、Apple TV)播放
x-webkit-airplay="true"
3.播放视频不全屏
webkit-playsinline="true"
-->
<video x-webkit-airplay="true" webkit-playsinline="true" preload="auto" autoplay src="http://"></video>

flex下的子元素必须为块级元素，非块级元素在android2.3机器下flex失效
